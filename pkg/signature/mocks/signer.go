// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"gitlab.com/tokend/sd3/erc20-bridge/pkg/signature"
	"sync"
)

// Ensure, that SignerMock does implement signature.Signer.
// If this is not the case, regenerate this file with moq.
var _ signature.Signer = &SignerMock{}

// SignerMock is a mock implementation of signature.Signer.
//
// 	func TestSomethingThatUsesSigner(t *testing.T) {
//
// 		// make and configure a mocked signature.Signer
// 		mockedSigner := &SignerMock{
// 			SignFunc: func(hasher signature.Hasher) (*signature.Parameters, error) {
// 				panic("mock out the Sign method")
// 			},
// 		}
//
// 		// use mockedSigner in code that requires signature.Signer
// 		// and then make assertions.
//
// 	}
type SignerMock struct {
	// SignFunc mocks the Sign method.
	SignFunc func(hasher signature.Hasher) (*signature.Parameters, error)

	// calls tracks calls to the methods.
	calls struct {
		// Sign holds details about calls to the Sign method.
		Sign []struct {
			// Hasher is the hasher argument value.
			Hasher signature.Hasher
		}
	}
	lockSign sync.RWMutex
}

// Sign calls SignFunc.
func (mock *SignerMock) Sign(hasher signature.Hasher) (*signature.Parameters, error) {
	if mock.SignFunc == nil {
		panic("SignerMock.SignFunc: method is nil but Signer.Sign was just called")
	}
	callInfo := struct {
		Hasher signature.Hasher
	}{
		Hasher: hasher,
	}
	mock.lockSign.Lock()
	mock.calls.Sign = append(mock.calls.Sign, callInfo)
	mock.lockSign.Unlock()
	return mock.SignFunc(hasher)
}

// SignCalls gets all the calls that were made to Sign.
// Check the length with:
//     len(mockedSigner.SignCalls())
func (mock *SignerMock) SignCalls() []struct {
	Hasher signature.Hasher
} {
	var calls []struct {
		Hasher signature.Hasher
	}
	mock.lockSign.RLock()
	calls = mock.calls.Sign
	mock.lockSign.RUnlock()
	return calls
}
